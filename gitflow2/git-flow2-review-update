#!/bin/bash
set -e
set -o pipefail

[[ -n "${DEBUG}" ]] && set -x

# Make sure we're spliting strings by newlines.
export IFS=$'\n'

. git-flow2-rainbow.sh
. git-flow2-spinner.sh
. git-flow2-common.sh

ensure_repo_is_initialized

trap cleanup EXIT

function cleanup {
  if [[ "$?" -ne "0" ]]; then
    echo
    echo "I'm bailing out now. Have a nice day!"
  fi
  stop_spinner 0
}

# Mae sure user has `underscore-cli` installed.
_=$(underscore --version 2>/dev/null) || {
  print_scream
  echo "${__bold}Looks like you don't have underscore-cli installed!${__normal}"
  echo "Run 'npm install -g underscore-cli' like, right now!"
  exit 1
}


STORY_ID_LINE_RX=".*(story-id).*[0-9]{8,9}.*"
STORY_ID_RX="s|.*\([0-9]\{8,9\}\).*|\1|"


function handle_missing_story_id {
  last_commit_sha=$(git log -1 --pretty=format:"%h")
  echo "${__bold}Oh noes, I could not update your review!${__normal}"
  print_scream
  echo "${__bold}Story id not found in commit message for '${last_commit_sha}'${__normal}."
  echo
  echo "Please use 'git commit --amend' to add a 'story-id: <PT story id>' line."
  echo "That's what I use to figure out what story your commit relates to and I can "
  echo "find the relevant review to update."
  exit 1
}


function update_review_request {
  local rid=$1
  local last_commit_log=$2
  local descr
  local new_descr
  
  start_spinner "Loading old review request description..."
  descr=$(rbt api-get /review-requests/${rid}/ | \
    underscore extract 'review_request.description' --outfmt text)
  stop_spinner 0

  new_descr=$(echo -e "${last_commit_log}\n${descr}")
  echo "Updating the review"

  rbt post -r ${rid} --description "${new_descr}"
}


function draw_motivational_dude {
  # from http://www.ascii-art.de/ascii/my/small2.shtml
  echo "                 /                                     "
  echo "                /               .'                     "
  echo "               /              .'                       "
  echo "              /   ______.   .'                         "
  echo "             /   / __/_//  '  Updating                 "
  echo "            /   / /  c c             our               "
  echo "           /    \ G    >        reviews     _.-'       "
  echo "          /      \/.  -                 _.-'           "
  echo "         /     .---\  / --.         _.-'               "
  echo "        /     /     \(     \    _.-'                   "
  echo "       /     /  \    \  (.  )  '       for             "
  echo "      /     /   /\       \ /               a           "
  echo "     /      \  |  \       \               __..--''     "
  echo "    /   .'   \_\   )     )\\      __..--''             "
  echo "   /  .'      ) \  |    /   \  -''                     "
  echo "  / .'   _   '///\` (   /\    \                        "
  echo " /.' _.-'  __     /    ) )    )       better           "
  echo " '.-'..--''      /   ,' /    /            tomorrow     "
  echo "  .__---------- /__./  /    / --------------------     "
  echo "     \`\`--..  __//  /   )   /                         "
  echo "            /    _J)   /)\`-\                          "
  echo "            '\`-__/-'  \` \\  |(                       "
  echo "                       \`   \  -..__                   "
  echo "                          \`--'       \`\`--..__       "
  echo "                                             \`\`--    "
}


last_commit_log="$(git log -1 --pretty=format:\"%s%n%b\")"
line=$(echo -e "${last_commit_log}" | \
  grep -E -i "${STORY_ID_LINE_RX}") || {
  handle_missing_story_id
}

draw_motivational_dude

story_id=$(echo ${line} | sed "${STORY_ID_RX}")
github_repo=$(git config --get remote.origin.url | sed -E "s|.*[:/]{1}([^:/]+/[^:]+)$|\1|") 

start_spinner "Loading ReviewBoard repositories..."
# WARNING: Here be dark magic...
# We need to limit number review request update candidates. So we want to know the
# RB repo id. This is how we find it.
rb_repo_id=$(rbt api-get /repositories --max-results=200 | \
  underscore extract 'repositories' | \
  underscore find "value.path.indexOf('${github_repo}') >= 0" | \
  underscore extract 'id' --outfmt text) || {

  echo
  echo "Failed to load ReviewBoard repositories..."
  exit 1
}
stop_spinner 0

start_spinner "Loading review request update candidates.."
# WARNING: Here be dark magic too...
# Get all review requests whose branch field value contains `story_id`.
review_requests=$(rbt api-get /review-requests --max-results=200 --repository=${rb_repo_id} --ship-it=0 --status=pending | \
  underscore extract review_requests | \
  underscore reject "value.branch.indexOf('${story_id}') < 0")
stop_spinner 0

rids=($(echo "${review_requests}" | underscore pluck 'id' --outfmt text))

if [[ ${#rids[@]} -eq "0" ]]; then
  echo "Well this is weird. I could not find any matching review request."
  echo
  echo "Are you sure you shouldn't be developing this on a feature branch?"
  echo "Or maybe you just forgot to publish it?"
  echo
  echo "But anyway, I will post a new review now."
  rbt post --branch "${story_id}" \
    --summary "$(git log -1 --pretty=format:\"%s\")" \
    --description "$(git log -1 --pretty=format:\"%b\")"
  echo
  echo "Have a nice day!"
  exit 0
fi

if [[ ${#rids[@]} -eq "1" ]]; then
  echo "There's exacly one matching review request: #${rids[0]}."
  echo "Let's update it now."
  update_review_request ${rids[0]} "$(git log -1 --pretty=format:\"%s%n%n%b\")"
  echo
  echo "All done. Have a nice day!"

  exit 0
fi

echo
echo "We have found more than one candidate review to update (branch field matches). You'll have to choose."
echo

summaries=($(echo "${review_requests}" | underscore pluck 'summary' --outfmt text))
for i in "${!rids[@]}"; do
  if [ "$i" -le "9" ]; then
    # OCD padding.
    echo -e "[$i]:  ${rids[$i]}: ${summaries[$i]}"
  else
    echo -e "[$i]: ${rids[$i]}: ${summaries[$i]}"
  fi;
done

# Get rid of garbage in stdin.
flush_stdio

read -p "Please select review to update: " selected_index

check_bounds ${selected_index} ${#rids[@]} "0" || {
  echo "Selected index is out of bounds. Run me again and choose better next time!"
  exit 1;
}

case ${selected_index} in
  [0-9]* ) ;;
  * ) echo "Non-numeric value detected. Exiting now."; exit 1;;
esac

rid=${rids[${selected_index}]}

echo "Thank you! I will now proceed to update review #${rid}."

update_review_request "${rid}" "$(git log -1 --pretty=format:\"%s%n%n%b\")"

echo
echo "All done. Don't forget to publish your changes in Review Board!"
echo "Have a nice day!"
